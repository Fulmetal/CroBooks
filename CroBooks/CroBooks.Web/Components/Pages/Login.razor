@page "/login"
@using CroBooks.Shared.Dto.Request

@inherits AppComponentBase
@implements IDisposable

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height: 80vh">
    <MudPaper Elevation="1">
        <EditForm Model="@_loginRequest" OnValidSubmit="OnValidUserSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h4">@Localize("Login")</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Variant="Variant.Text"  Label="@(LocalizeLabel(() => _loginRequest.UsernameOrEmail))" @bind-Value="_loginRequest.UsernameOrEmail" For="@(() => _loginRequest.UsernameOrEmail)"></MudTextField>
                    <MudTextField Variant="Variant.Text" InputType="InputType.Password" Label="@(LocalizeLabel(() => _loginRequest.Password))" @bind-Value="_loginRequest.Password" For="@(() => _loginRequest.Password)"></MudTextField>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">@LocalizeElement("ButtonLogin")</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudPaper>
</MudStack>

@code {
    [Inject] public HttpInterceptorService Interceptor { get; set; } = null!;
    [Inject] public AuthHttpClient AuthHttpClient { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    [Inject] public CustomAuthStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    private LoginRequestDto _loginRequest = new();

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
    }

    private async Task OnValidUserSubmit()
    {
        var result = await AuthHttpClient.Login(_loginRequest);

        if (!string.IsNullOrEmpty(result.Message) && string.IsNullOrEmpty(result.Token))
        {
            Snackbar.Add(result.Message, Severity.Error);
        }

        if (!string.IsNullOrEmpty(result.Token))
        {
            await AuthStateProvider.UpdateAuthenticationState(result.Token);
            NavigationManager.NavigateTo("/home", false);
        }
    }
}
