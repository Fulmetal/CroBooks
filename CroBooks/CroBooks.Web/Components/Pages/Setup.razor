@using CroBooks.Shared.Dto
@using CroBooks.Shared.Dto.Request
@using CroBooks.Web.Components.Layout
@using CroBooks.Web.Resources.Models
@using CroBooks.Web.Resources

@page "/setup"
@layout EmptyLayout
@inherits AppComponentBase

<PageTitle>@Localize("Setup_Setup")</PageTitle>

<MudStack>
    <MudStack Row="true" Justify="Justify.FlexEnd" >
        <MudItem>
            <CultureSelector />
        </MudItem>
    </MudStack>
    <MudText Typo="@Typo.h1">Cro Books</MudText>
    <MudText Typo="@Typo.h3">@Localize("Setup_Setup")</MudText>

    <MudDivider></MudDivider>
    <MudCarousel @ref="carousel" @bind-SelectedIndex="wizardStep" Style="height:70vh;" Class="mud-width-full" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="false" AutoCycle="false" TData="string">
        <MudCarouselItem Transition="Transition.Slide">

            @if (adminExists)
            {
                <MudText Typo="Typo.h6">User created</MudText>
            }
            else
            {
                <EditForm Model="@userRequest" OnValidSubmit="OnValidUserSubmit">
                    <DataAnnotationsValidator />
                    <MudCard>
                        <MudCardHeader><MudText Typo="Typo.h5">@Localize("Setup_CreateAdmin")</MudText></MudCardHeader>
                        <MudCardContent>
                            <MudTextField Variant="Variant.Text" Label="@(LocalizeLabel(() => userRequest.FirstName))" @bind-Value="userRequest.FirstName" For="@(() => userRequest.FirstName)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => userRequest.LastName))" @bind-Value="userRequest.LastName" For="@(() => userRequest.LastName)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => userRequest.Email))" @bind-Value="userRequest.Email" For="@(() => userRequest.Email)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => userRequest.Username))" @bind-Value="userRequest.Username" For="@(() => userRequest.Username)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => userRequest.Password))" @bind-Value="userRequest.Password" For="@(() => userRequest.Password)" InputType="InputType.Password"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => userRequest.ConfirmPassword))" @bind-Value="userRequest.ConfirmPassword" For="@(() => userRequest.ConfirmPassword)" InputType="InputType.Password"></MudTextField>
                        </MudCardContent>
                        <MudCardActions>
                            @if (wizardStep == 0)
                            {
                                <MudButton Disabled="@userInsertBusy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                                    @if (companyInsertBusy)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">@LocalizeElement("ButtonProcessing")</MudText>
                                    }
                                    else
                                    {
                                        <MudText>@LocalizeElement("ButtonCreate")</MudText>
                                    }
                                </MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            }

        </MudCarouselItem>
        <MudCarouselItem Transition="Transition.Slide">
            <EditForm Model="@companyDto" OnValidSubmit="OnValidCompanySubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader><MudText Typo="Typo.h5">@Localize("Setup_CreateCompany")</MudText></MudCardHeader>
                    <MudCardContent>
                        <MudTextField Variant="Variant.Text" Label="@(LocalizeLabel(() => companyDto.Name))" @bind-Value="companyDto.Name" For="@(() => companyDto.Name)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.Address))" @bind-Value="companyDto.Address" For="@(() => companyDto.Address)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.PostalCode))" @bind-Value="companyDto.PostalCode" For="@(() => companyDto.PostalCode)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.City))" @bind-Value="companyDto.City" For="@(() => companyDto.City)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.Country))" @bind-Value="companyDto.Country" For="@(() => companyDto.Country)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.TaxNumber))" @bind-Value="companyDto.TaxNumber" For="@(() => companyDto.TaxNumber)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.IBAN))" @bind-Value="companyDto.IBAN" For="@(() => companyDto.IBAN)"></MudTextField>
                        <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.RegisteredActivity))" @bind-Value="companyDto.RegisteredActivity" For="@(() => companyDto.RegisteredActivity)"></MudTextField>
                        <MudDatePicker Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => companyDto.RegistrationDate))" @bind-Date="companyDto.RegistrationDate" For="@(() => companyDto.RegistrationDate)"></MudDatePicker>
                    </MudCardContent>
                    <MudCardActions>
                        @if (wizardStep == 1)
                        {
                            <MudButton Disabled="@companyInsertBusy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                                @if (companyInsertBusy)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">@LocalizeElement("ButtonProcessing")</MudText>
                                }
                                else
                                {
                                    <MudText>@LocalizeElement("ButtonCreate")</MudText>
                                }
                            </MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudCarouselItem>
    </MudCarousel>
</MudStack>

@code {
    [Inject] public UserHttpClient UserHttpClient { get; set; } = null!;
    [Inject] public CompanyHttpClient CompanyHttpClient { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    private bool adminExists = false;
    private bool companyExists = false;
    private CreateUserRequestDto userRequest = new() { RoleId = 1 };
    private CompanyDto companyDto = new() { IsDefault = true };
    private MudCarousel<string> carousel = null!;
    private int wizardStep = 0;
    bool userInsertBusy = false;
    bool companyInsertBusy = false;

    protected override async Task OnInitializedAsync()
    {
        adminExists = await UserHttpClient.CheckAdminExists();
        companyExists = await CompanyHttpClient.CheckAnyCompanyExists();
        WizardNextStep();
    }

    protected async Task OnValidUserSubmit()
    {
        userInsertBusy = true;
        var result = await UserHttpClient.SetupAdminUser(userRequest);
        if (result != null)
        {
            adminExists = true;
            WizardNextStep();
        }
        userInsertBusy = false;
    }

    protected async Task OnValidCompanySubmit()
    {
        companyInsertBusy = true;
        var result = await CompanyHttpClient.AddCompany(companyDto);
        if (result != null)
        {
            companyExists = true;
            WizardNextStep();
        }
        companyInsertBusy = false;
    }

    protected void WizardNextStep()
    {
        if (companyExists)
            wizardStep = 0;
        if (adminExists)
            wizardStep = 1;
        if (adminExists && companyExists)
            NavigationManager.NavigateTo("/home", false);
    }
}
