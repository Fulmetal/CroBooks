@using CroBooks.Shared.Dto
@using CroBooks.Shared.Dto.Request

@page "/setup"
@layout EmptyLayout
@inherits AppComponentBase
@implements IDisposable

<PageTitle>@Localize("Setup_Setup")</PageTitle>

<MudStack>
    <MudStack Row="true" Justify="Justify.FlexEnd" >
        <MudItem>
            <CultureSelector />
        </MudItem>
    </MudStack>
    <MudText Typo="@Typo.h1">Cro Books</MudText>
    <MudText Typo="@Typo.h3">@Localize("Setup_Setup")</MudText>

    <MudDivider></MudDivider>
    <MudCarousel @bind-SelectedIndex="_wizardStep" Style="height:70vh;" Class="mud-width-full" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="false" AutoCycle="false" TData="string">
        <MudCarouselItem Transition="Transition.Slide">

            @if (_adminExists)
            {
                <MudText Typo="Typo.h6">User created</MudText>
            }
            else
            {
                //this should be removed in issue #2, currently is a possible breaking change
                <EditForm Model="@_userRequest" OnValidSubmit="OnUserSubmit">
                    <DataAnnotationsValidator />
                    <MudCard>
                        <MudCardHeader><MudText Typo="Typo.h5">@Localize("Setup_CreateAdmin")</MudText></MudCardHeader>
                        <MudCardContent>
                            <MudTextField Variant="Variant.Text" Label="@(LocalizeLabel(() => _userRequest.FirstName))" @bind-Value="_userRequest.FirstName" For="@(() => _userRequest.FirstName)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => _userRequest.LastName))" @bind-Value="_userRequest.LastName" For="@(() => _userRequest.LastName)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => _userRequest.Email))" @bind-Value="_userRequest.Email" For="@(() => _userRequest.Email)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => _userRequest.Username))" @bind-Value="_userRequest.Username" For="@(() => _userRequest.Username)"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => _userRequest.Password))" @bind-Value="_userRequest.Password" For="@(() => _userRequest.Password)" InputType="InputType.Password"></MudTextField>
                            <MudTextField Variant="Variant.Text" Class="mt-2" Label="@(LocalizeLabel(() => _userRequest.ConfirmPassword))" @bind-Value="_userRequest.ConfirmPassword" For="@(() => _userRequest.ConfirmPassword)" InputType="InputType.Password"></MudTextField>
                        </MudCardContent>
                        <MudCardActions>
                            @if (_wizardStep == 0)
                            {
                                <MudSpacer />
                                <SaveButton IsComponentBusy="ComponentBusy" SaveButtonClicked="OnUserSubmit" />
                            }
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            }

        </MudCarouselItem>
        <MudCarouselItem Transition="Transition.Slide">
            <MudCard>
                <MudCardContent>
                    <CompanyForm @ref="_companyForm" CompanyDto="_companyDto"></CompanyForm>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <SaveButton IsComponentBusy="ComponentBusy" SaveButtonClicked="@OnCompanySubmit" />
                </MudCardActions>
            </MudCard>
        </MudCarouselItem>
    </MudCarousel>
</MudStack>

@code {
    [Inject] HttpInterceptorService Interceptor { get; set; } = null!;
    [Inject] public UserHttpClient UserHttpClient { get; set; } = null!;
    [Inject] public CompanyHttpClient CompanyHttpClient { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    private bool _adminExists;
    private bool _companyExists;
    private CreateUserRequestDto _userRequest = new(roleId: 1);
    private CompanyDto _companyDto = new(isDefault: true);
    private CompanyForm _companyForm = null!;
    private int _wizardStep;
    // bool _userInsertBusy;
    // bool _companyInsertBusy;

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        _adminExists = await UserHttpClient.CheckAdminExists();
        _companyExists = await CompanyHttpClient.CheckAnyCompanyExists();
        WizardNextStep();
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
    }

    private async Task OnUserSubmit()
    {
        ToggleBusy();
        var result = await UserHttpClient.SetupAdminUser(_userRequest);
        if (result != null)
        {
            _adminExists = true;
            WizardNextStep();
        }
        ToggleBusy();
    }

    private async Task OnCompanySubmit()
    {
        if (!_companyForm.Validate())
            return;
        
        ToggleBusy();
        var result = await CompanyHttpClient.AddCompany(_companyDto);
        if (result != null)
        {
            _companyExists = true;
            WizardNextStep();
        }
        ToggleBusy();
    }

    private void WizardNextStep()
    {
        if (_companyExists)
            _wizardStep = 0;
        if (_adminExists)
            _wizardStep = 1;
        if (_adminExists && _companyExists)
            NavigationManager.NavigateTo("/home", false);
    }
}
