@using CroBooks.Web.HttpClients
@using MudBlazor.ThemeManager
@inherits LayoutComponentBase


<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
<MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />

<MudThemeProvider Theme="_themeManager.Theme" IsDarkMode="@_isDarkMode" />

@* Required *@
@* <MudThemeProvider IsDarkMode="@_isDarkMode" /> *@
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.Large"
    CloseButton="true"
    BackdropClick="false"
    NoHeader="false"
    Position="DialogPosition.Center"
    CloseOnEscapeKey="true"
    />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    @* <MudAppBar Elevation="1"> *@
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            </Authorized>
        </AuthorizeView>
        <MudText Typo="Typo.h5" Class="ml-3">Cro Books</MudText>
        <MudSpacer />
        <CultureSelector />
        <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="@((e) => ToggleDarkMode(e))"
        ThumbIcon="@(_isDarkMode == true ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
        ThumbIconColor="@(_isDarkMode == true ? Color.Dark : Color.Dark)"
        Color="Color.Primary">
        </MudSwitch>
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <AuthorizeView>
        <Authorized>
            @* <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2"> *@
            <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
                <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent>
        <MudContainer Class="pt-3" MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject] public CustomAuthStateProvider AuthStatProvider { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    bool _drawerOpen = true;
    bool _isDarkMode = true;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStatProvider.GetAuthenticationStateAsync();
        
        if (state.User == null || state.User.Identity == null || state.User.Identity.IsAuthenticated == false)
        {
            NavigationManager.NavigateTo("/login");
        }
    }



    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ToggleDarkMode(bool value)
    {
        _isDarkMode = value;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }
}